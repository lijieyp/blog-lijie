(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{123:function(t,a,e){t.exports=e.p+"assets/img/git-custom.e085df97.e085df97.png"},124:function(t,a,e){t.exports=e.p+"assets/img/git-issue.9a97caa0.9a97caa0.png"},125:function(t,a,e){t.exports=e.p+"assets/img/git-commit1.805e95d8.805e95d8.jpg"},126:function(t,a,e){t.exports=e.p+"assets/img/git-commit2.d8eb0eae.d8eb0eae.jpg"},140:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git管理规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git管理规范","aria-hidden":"true"}},[t._v("#")]),t._v(" Git管理规范")]),t._v(" "),s("h2",{attrs:{id:"分支介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支介绍","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支介绍")]),t._v(" "),s("p",[t._v("分支包括主分支（master）、功能开发分支（feature）、主开发分支（dev）、主测试分支（qa）、发布分支（release）、修复分支（hotfixs）。")]),t._v(" "),s("p",[s("strong",[t._v("开发环境")]),t._v("：功能开发分支（feature）、主开发分支（dev）")]),t._v(" "),s("p",[s("strong",[t._v("测试环境")]),t._v("：主测试分支（qa）")]),t._v(" "),s("p",[s("strong",[t._v("预发布环境")]),t._v("：发布分支（release）")]),t._v(" "),s("p",[s("strong",[t._v("生产环境")]),t._v("：主分支（master）")]),t._v(" "),s("h4",{attrs:{id:"主分支（master）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主分支（master）","aria-hidden":"true"}},[t._v("#")]),t._v(" 主分支（master）")]),t._v(" "),s("p",[t._v("所有提供给用户使用的正式版本，都在主分支上发布，主分支为保护分支，不允许直接在主分支上开发，属于生产环境")]),t._v(" "),s("h4",{attrs:{id:"功能开发分支-feature"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#功能开发分支-feature","aria-hidden":"true"}},[t._v("#")]),t._v(" 功能开发分支(feature)")]),t._v(" "),s("p",[t._v("多个人共同开发一个新需求时，每一个人应该从主干分支切出一个功能开发分支，命名为: f_需求名_时间_开发者(如: f_addGrid_20190125_renlq)")]),t._v(" "),s("h4",{attrs:{id:"主开发分支-dev"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主开发分支-dev","aria-hidden":"true"}},[t._v("#")]),t._v(" 主开发分支(dev)")]),t._v(" "),s("p",[t._v("一个新需求被拆分多个模块，由多个开发人员在各自的功能分支上开发，所有开发人员将自己的代码都合并在主开发分支上才能联调；分支名称：dev")]),t._v(" "),s("h4",{attrs:{id:"主测试分支-qa"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主测试分支-qa","aria-hidden":"true"}},[t._v("#")]),t._v(" 主测试分支(qa)")]),t._v(" "),s("p",[t._v("所有的队员将自己的代码都合到主开发分支上，联调成功后，切测试分支交测试人员测试；分支名称：qa")]),t._v(" "),s("h4",{attrs:{id:"发布分支-release"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发布分支-release","aria-hidden":"true"}},[t._v("#")]),t._v(" 发布分支(release)")]),t._v(" "),s("p",[t._v("测试成功，从主测试分支切一个分支作为发布分支上线；分支名称如:release_v1.0.1、release_v2.1.1")]),t._v(" "),s("h4",{attrs:{id:"修复bug分支-hotfixs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修复bug分支-hotfixs","aria-hidden":"true"}},[t._v("#")]),t._v(" 修复bug分支(hotfixs)")]),t._v(" "),s("p",[t._v("线上产品出现bug，从master分支切出一个修复bug分支,修复完成、测试通过后上线，上线完成后删除；分支名称:hotfixs_bug")]),t._v(" "),s("h2",{attrs:{id:"git使用规范流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git使用规范流程","aria-hidden":"true"}},[t._v("#")]),t._v(" Git使用规范流程")]),t._v(" "),s("p",[s("img",{attrs:{src:e(123),alt:"git-custom.e085df97"}})]),t._v(" "),s("h2",{attrs:{id:"git修复已发布版本的bug流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git修复已发布版本的bug流程","aria-hidden":"true"}},[t._v("#")]),t._v(" Git修复已发布版本的Bug流程")]),t._v(" "),s("p",[s("img",{attrs:{src:e(124),alt:"git-issue.9a97caa0"}})]),t._v(" "),s("h2",{attrs:{id:"开发流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 开发流程")]),t._v(" "),s("h4",{attrs:{id:"新建分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建分支","aria-hidden":"true"}},[t._v("#")]),t._v(" 新建分支")]),t._v(" "),s("p",[t._v("首先，每次开发新功能，都应该新建一个单独的分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 获取主干最新代码\n$ git checkout master\n$ git pull\n\n# 新建一个开发分支myfeature\n$ git checkout -b myfeature\n")])])]),s("h4",{attrs:{id:"提交分支commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交分支commit","aria-hidden":"true"}},[t._v("#")]),t._v(" 提交分支commit")]),t._v(" "),s("p",[t._v("分支修改后，就可以提交commit了。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git add --all\n$ git status\n$ git commit --verbose\n")])])]),s("p",[t._v("git add 命令的all参数，表示保存所有变化（包括新建、修改和删除）。从Git 2.0开始，all是 git add 的默认参数，所以也可以用 git add . 代替。\ngit status 命令，用来查看发生变动的文件。\ngit commit 命令的verbose参数，会列出 diff 的结果。")]),t._v(" "),s("h4",{attrs:{id:"撰写提交信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撰写提交信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 撰写提交信息")]),t._v(" "),s("p",[t._v("每次提交commit必须要有提交注释，注释根据本次提交情况，进行简洁描述。")]),t._v(" "),s("h4",{attrs:{id:"与主干同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与主干同步","aria-hidden":"true"}},[t._v("#")]),t._v(" 与主干同步")]),t._v(" "),s("p",[t._v("分支的开发过程中，要经常与主干保持同步。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git fetch origin\n$ git rebase origin/master\n")])])]),s("h4",{attrs:{id:"合并commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并commit","aria-hidden":"true"}},[t._v("#")]),t._v(" 合并commit")]),t._v(" "),s("p",[t._v("分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个（或最多两三个）commit，这样不仅清晰，也容易管理。 那么，怎样才能将多个commit合并呢？这就要用到 git rebase 命令。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git rebase -i HEAD~4  //对最近的 4 个 commit 进行 rebase 操作\n")])])]),s("p",[t._v("这时会打开一个如下的互动界面")]),t._v(" "),s("p",[s("img",{attrs:{src:e(125),alt:"git-commit1.805e95d8"}})]),t._v(" "),s("p",[t._v("Commands下6个命令当中，squash和fixup可以用来合并commit，先把需要合并的commit前面的动词，改成fixup（或者f）。")]),t._v(" "),s("p",[t._v("squash：会将当前commit与上一个commit合并；\nfixup：与squash相同，但不会保存当前commit的提交信息")]),t._v(" "),s("p",[s("img",{attrs:{src:e(126),alt:"git-commit2.d8eb0eae"}})]),t._v(" "),s("p",[t._v("完成后，使用 :wq 保存并退出，第三行和第四行的commit都会丢弃，只保留第二行的commit，提交信息只包含这二个commit的提交信息。")]),t._v(" "),s("h4",{attrs:{id:"推送到远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推送到远程仓库","aria-hidden":"true"}},[t._v("#")]),t._v(" 推送到远程仓库")]),t._v(" "),s("p",[t._v("合并commit后，就可以推送当前分支到远程仓库了")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git push origin myfeature\n$ git push --force origin myfeature  //rebase以后，分支历史改变了，跟远程分支不一定兼容，有可能要强行推送\n")])])]),s("h4",{attrs:{id:"发出pull-request"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发出pull-request","aria-hidden":"true"}},[t._v("#")]),t._v(" 发出Pull Request")]),t._v(" "),s("p",[t._v("提交到远程仓库以后，就可以发出 Pull Request 到master分支，然后请求别人进行代码review，确认可以合并到master。")]),t._v(" "),s("h2",{attrs:{id:"日志规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#日志规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 日志规范")]),t._v(" "),s("h4",{attrs:{id:"commit-messages的基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-messages的基本语法","aria-hidden":"true"}},[t._v("#")]),t._v(" Commit messages的基本语法")]),t._v(" "),s("p",[t._v("具体格式为:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("id type： subject\n")])])]),s("p",[t._v("id: 禅道ID\ntype: 本次 commit 的类型，诸如 bugfix docs style 等\nsubject: 简明扼要的阐述下本次 commit 的内容")]),t._v(" "),s("p",[t._v("Type的类别说明：")]),t._v(" "),s("p",[t._v("feat: 添加新特性\nfix: 修复bug\ndocs: 仅仅修改了文档\nstyle: 仅仅修改了空格、格式缩进、样式等等，不改变代码逻辑\nrefactor: 代码重构，没有加新功能或者修复bug\nperf: 增加代码进行性能测试\ntest: 增加测试用例\nchore: 改变构建流程、或者增加依赖库、工具等")]),t._v(" "),s("h2",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项","aria-hidden":"true"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("一定要做好GIT配置，如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('  $ git config --global user.name "renlq"\n  $ git config --global user.email  renlq@example.com\n')])])])])]),t._v(" "),s("p",[t._v("这样可以从提交历史中看到每次提交人；")]),t._v(" "),s("ul",[s("li",[t._v("每个开发人员都应该在自己的开发分支上开发；")]),t._v(" "),s("li",[t._v("开发分支合并到公共分支前，必须先更新本地公共分支，在把要合并的公共分支合并到自己的开发分支，完成后在把开发分支合并到公共分支；")])]),t._v(" "),s("p",[t._v("例子，开发分支(f_addGrid_20190125_renlq) 要合并到公共分支dev。")]),t._v(" "),s("p",[t._v("步骤：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("A:f_addGrid_20190125_renlq提交并push；\n\nB:切换到dev分支并更新，保持跟远程仓库一致；\n\nC:切回f_addGrid_20190125_renlq分支，把dev分支的代码合并到此分支；\n\nD:把合并后的 f_addGrid_20190125_renlq 分支合并到dev并push到远程仓库；\n")])])]),s("p",[t._v("目的：避免覆盖他人代码；")]),t._v(" "),s("ul",[s("li",[t._v("永久存在的分支只有master、dev、发布分支、tag；其他分支在需求上线后删除，保持分支清晰明确；")]),t._v(" "),s("li",[t._v("提交代码(commit)时，必须要把此次提交的注释描写清楚；")]),t._v(" "),s("li",[t._v("master为保护分支，不直接在master上进行代码修改和提交。")]),t._v(" "),s("li",[t._v("分支的名称中不使用中划线，应使用下划线，如(f_xxx_yyy，而不是f-xxx-yyy)，这样做的好处是方便拷贝，双击鼠标即能选择名称；")]),t._v(" "),s("li",[t._v("代码合并的过程中如果遇到冲突，那么应该由几个人一起来解决这个冲突，这样避免合并出错，引出bug；")]),t._v(" "),s("li",[t._v("一定要做.gitignore文件中，过滤除掉个性文件、编译结果、IDE产生的配置 等文件类型，这样避免干扰他人；")]),t._v(" "),s("li",[t._v("每次发布生产(master),需要为master打一个tag,方便线上回滚")])])])},[],!1,null,null,null);a.default=r.exports}}]);