(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{145:function(t,e,s){"use strict";s.r(e);var a=s(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"loader和插件的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loader和插件的使用","aria-hidden":"true"}},[t._v("#")]),t._v(" loader和插件的使用")]),t._v(" "),s("h2",{attrs:{id:"css样式处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css样式处理","aria-hidden":"true"}},[t._v("#")]),t._v(" CSS样式处理")]),t._v(" "),s("h3",{attrs:{id:"插入到style标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入到style标签","aria-hidden":"true"}},[t._v("#")]),t._v(" 插入到style标签")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i css-loader style-loader -D\nnpm i less less-loader -D\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let path = require('path');\n// 插件都是一个类，所以我们命名的时候尽量用大写开头\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        // 添加hash可以防止文件缓存，每次都会生成4位的hash串\n        filename: 'bundle.[hash:4].js',   \n        path: path.resolve('dist')\n    },\n\tmodule:{//模块\n\t\trules:[\n\t\t\t//css-loader 接续 @import这种语法的\n\t\t\t//style-loader 他是把css插入到head标签中\n\t\t\t//loader的特点 希望单一\n\t\t\t//loader的用法 字符串只用一个loader\n\t\t\t//多个loader需要[]\n\t\t\t//loader的顺序 默认是从右向左执行\n\t\t\t//loader还可以写成对象方式\n\t\t\t{\n                test:/\\.css$/,\n                use:[\n                    {\n\t\t\t\t\t\tloader:'style-loader',\n\t\t\t\t\t\toptions:{\n\t\t\t\t\t\t\tinsertAt:'top'//css插入到html文档顶部\n\t\t\t\t\t\t}\n                    },\n                    'css-loader'\n                ]\n            }，\n            //处理less\n            {\n                test:/\\.less$/,\n                use:[\n                    {\n\t\t\t\t\t\tloader:'style-loader',\n\t\t\t\t\t\toptions:{\n\t\t\t\t\t\t\tinsertAt:'top'//css插入到html文档顶部\n\t\t\t\t\t\t}\n                    },\n                    'css-loader',\n                    'less-loader'\n                ]\n            }\n\t\t]\n\t}\n}\n")])])]),s("h3",{attrs:{id:"抽离单独css文件，link标签引入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽离单独css文件，link标签引入","aria-hidden":"true"}},[t._v("#")]),t._v(" 抽离单独css文件，link标签引入")]),t._v(" "),s("p",[s("code",[t._v("npm i mini-css-extract-plugin -D")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        // 添加hash可以防止文件缓存，每次都会生成4位的hash串\n        filename: 'bundle.[hash:4].js',   \n        path: path.resolve('dist')\n    },\n    plugins: [\n        // 通过new一下这个类来使用插件\n        new MiniCssExtractPlugin({\n            filename:'css/main.css'\n        })\n    ],\n    module:{//模块\n\t\trules:[\n\t\t\t{\n                test:/\\.css$/,\n                use:[\n                    MiniCssExtractPlugin.loader\n                    'css-loader'\n                ]\n            }，\n            //处理less\n            {\n                test:/\\.less$/,\n                use:[\n                    MiniCssExtractPlugin.loader\n                    'css-loader',\n                    'less-loader'\n                ]\n            }\n\t\t]\n\t}\n}\n")])])]),s("h3",{attrs:{id:"添加css3前缀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加css3前缀","aria-hidden":"true"}},[t._v("#")]),t._v(" 添加CSS3前缀")]),t._v(" "),s("p",[t._v("通过postcss中的autoprefixer可以实现将CSS3中的一些需要兼容写法的属性添加响应的前缀，这样省去我们不少的时间")]),t._v(" "),s("p",[t._v("由于也是一个loader加载器，我们也需要先安装一下")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i postcss-loader autoprefixer -D\n")])])]),s("p",[t._v("安装后，我们还需要像webpack一样写一个config的配置文件，在项目根目录下创建一个"),s("strong",[t._v("postcss.config.js")]),t._v("文件，配置如下：")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    plugins: [require('autoprefixer')]  // 引用该插件即可了\n}\n")])])]),s("p",[t._v("然后在webpack里配置postcss-loader")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: ['style-loader', 'css-loader', 'postcss-loader']\n            }\n        ]\n    }\n}\n")])])]),s("h2",{attrs:{id:"转化es6语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转化es6语法","aria-hidden":"true"}},[t._v("#")]),t._v(" 转化ES6语法")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i babel-loader @babel/core @babel/preset-env -D\nnpm i @babel/plugin-proposal-class-properties -D\nnpm i @babel/plugin-proposal-decorators -D\njs异步语法转换\nnpm i @babel/plugin-transform-runtime -D\nnpm i @babel/runtime -S\nnpm i @babel/polyfill -S  //include语法不识别\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                use: {\n                \tloader:'babel-loader',\n                \toptions:{ //用babel-loader 需要把es6-es5\n                \t\tpresets:[\n                \t\t\t'@babel/preset-env'\n                \t\t],\n                \t\tplugins:[ \n                \t\t\t'@babel/plugin-proposal-decorators' //装饰器语法\n                \t\t\t'@babel/plugin-proposal-class-properties'//class语法转化\n                \t\t\t'@babel/plugin-transform-runtime'\n                \t\t]\n                \t}\n                },\n                //包括什么目录\n                include:path.resolve(__dirname,'src')\n                //排除node_modules\n                exclude:/node_modules/\n            }\n        ]\n    }\n}\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = '11'\nrequire('@babel/polyfill')\n\n'aaa'.includes('a')\n")])])]),s("h2",{attrs:{id:"js语法校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js语法校验","aria-hidden":"true"}},[t._v("#")]),t._v(" js语法校验")]),t._v(" "),s("p",[t._v("https://eslint.org/demo/    自定义语法校验最下面下载")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i eslint eslint-loader -D\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    module: {\n        rules: [\n        \t{\n        \t\ttest:/\\.js$/,\n        \t\tuse:{\n        \t\t\tloader:'eslint-loader',\n        \t\t\toptions:{\n        \t\t\t\tenforce:'pre'   //previous强制在其他loader之前执行 post强制之后\n        \t\t\t}\n        \t\t}\n        \t},\n            {\n                test: /\\.js$/, //normal  普通的loader\n                use: {\n                \tloader:'babel-loader',\n                \toptions:{ //用babel-loader 需要把es6-es5\n                \t\tpresets:[\n                \t\t\t'@babel/preset-env'\n                \t\t],\n                \t\tplugins:[ \n                \t\t\t'@babel/plugin-proposal-decorators' //装饰器语法\n                \t\t\t'@babel/plugin-proposal-class-properties'//class语法转化\n                \t\t\t'@babel/plugin-transform-runtime'\n                \t\t]\n                \t}\n                },\n                //包括什么目录\n                include:path.resolve(__dirname,'src')\n                //排除node_modules\n                exclude:/node_modules/\n            }\n        ]\n    }\n}\n")])])]),s("h3",{attrs:{id:"全局变量引入问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局变量引入问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 全局变量引入问题")]),t._v(" "),s("p",[t._v("expose-loader 暴露 全局的loader 内联的loader")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i expose-loader -D\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("import $ from 'expose-loader?$!jquery' //把$暴露到window\nconsole.log(window.$)\n")])])]),s("p",[t._v("或")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    module: {\n        rules: [\n        \t{\n        \t\ttest:require.resolve('jquery'),\n        \t\tuse:'expose-loader?$'\n        \t}\n        ]\n    }\n}\n")])])]),s("p",[t._v("给每个模块注入$")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let webpack = require('webpack')\n\nmodule.exports = {\n    plugins:[\n    \tnew webpack.ProvidePlugin({//在每个模块都注入$\n    \t\t$:'jquery'\n    \t})\n    ]\n}\n")])])]),s("h2",{attrs:{id:"图片处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图片处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 图片处理")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i file-loader url-loader -D\n")])])]),s("p",[t._v("如果是在css文件里引入的如背景图之类的图片，就需要指定一下相对路径")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: ExtractTextWebpackPlugin.extract({\n                    use: 'css-loader',\n                    publicPath: '../'\n                })\n            },\n            {\n                test: /\\.(jpe?g|png|gif)$/,\n                use: [\n                    {\n                        loader: 'url-loader',\n                        options: {\n                            limit: 8192,    // 小于8k的图片自动转成base64格式，并且不会存在实体图片\n                            outputPath: '/images/',   // 图片打包后存放的目录\n                            publicPath:'http://www.dd.com' //在所有img标签前加路径\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n")])])]),s("h3",{attrs:{id:"页面img引用图片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#页面img引用图片","aria-hidden":"true"}},[t._v("#")]),t._v(" 页面img引用图片")]),t._v(" "),s("p",[t._v("页面中经常会用到img标签，img引用的图片地址也需要一个loader来帮我们处理好")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i html-withimg-loader -D\n")])])]),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.(htm|html)$/,\n                use: 'html-withimg-loader'\n            }\n        ]\n    }\n}\n")])])]),s("h3",{attrs:{id:"引用字体图片和svg图片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用字体图片和svg图片","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用字体图片和svg图片")]),t._v(" "),s("p",[t._v("字体图标和svg图片都可以通过file-loader来解析")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.(eot|ttf|woff|svg)$/,\n                use: 'file-loader'\n            }\n        ]\n    }\n}\n")])])]),s("p",[t._v("这样即使样式中引入了这类格式的图标或者图片都没有问题了，img如果也引用svg格式的话，配合上面写好的html-withimg-loader就都没有问题了")]),t._v(" "),s("h2",{attrs:{id:"清理dist目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清理dist目录","aria-hidden":"true"}},[t._v("#")]),t._v(" 清理dist目录")]),t._v(" "),s("p",[t._v("在我们每次npm run build的时候都会在dist目录下创建很多打好的包，如果积累过多可能也会混乱")]),t._v(" "),s("p",[t._v("所以应该在每次打包之前将dist目录下的文件都清空，然后再把打好包的文件放进去")]),t._v(" "),s("p",[t._v("这里提供一个clean-webpack-plugin插件")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i clean-webpack-plugin -D\n")])])]),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let CleanWebpackPlugin = require('clean-webpack-plugin');\n\nmodule.exports = {\n    plugins: [\n        // 打包前先清空\n        new CleanWebpackPlugin('dist')  \n    ]\n}\n")])])]),s("h2",{attrs:{id:"html插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html插件","aria-hidden":"true"}},[t._v("#")]),t._v(" html插件")]),t._v(" "),s("p",[t._v("文件都打包好了，但是我们在使用的时候不能在dist目录下去创建一个html文件，然后去引用打包后的js吧，这不合理，实际开发中也不会这样 我们需要实现html打包功能，可以通过一个模板实现打包出引用好路径的html来 这就需要用到一个常用的插件了，html-webpack-plugin，用之前我们来安一下它")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i html-webpack-plugin -D\n")])])]),s("p",[t._v("因为是个插件，所以需要在config.js里引用一下的")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let path = require('path');\n// 插件都是一个类，所以我们命名的时候尽量用大写开头\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    entry: './src/index.js',\n    output: {\n        // 添加hash可以防止文件缓存，每次都会生成4位的hash串\n        filename: 'bundle.[hash:4].js',   \n        path: path.resolve('dist')\n    },\n    plugins: [\n        // 通过new一下这个类来使用插件\n        new HtmlWebpackPlugin({\n            // 用哪个html作为模板\n            // 在src目录下创建一个index.html页面当做模板来用\n            template: './src/index.html',\n            filename:'index.html',\n            hash: true, // 会在打包好的bundle.js后面加上hash串\n            minify:{\n            \tremoveAttributeQuotes:true,//去除html双引号\n            \tcollapseWhitespace：true //html压缩成一行\n            }\n        })\n    ]\n}\n")])])]),s("h3",{attrs:{id:"多页面开发，怎么配置多页面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多页面开发，怎么配置多页面","aria-hidden":"true"}},[t._v("#")]),t._v(" 多页面开发，怎么配置多页面")]),t._v(" "),s("p",[t._v("如果开发的时候不只一个页面，我们需要配置多页面，那么需要怎么来搞呢？不用担心，html-webpack-plugin插件自有办法，我们来观望一下")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let path = require('path');\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n    // 多页面开发，怎么配置多页面\n    entry: {\n        index: './src/index.js',\n        login: './src/login.js'\n    },\n    // 出口文件  \n    output: {                       \n        filename: '[name].js',\n        path: path.resolve('dist')\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: './src/index.html',   \n            filename: 'index.html',\n            chunks: ['index']   // 对应关系,index.js对应的是index.html\n        }),\n        new HtmlWebpackPlugin({\n            template: './src/login.html',\n            filename: 'login.html',\n            chunks: ['login']   // 对应关系,login.js对应的是login.html\n        })\n    ]\n}\n")])])]),s("h2",{attrs:{id:"html，css，js的代码压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#html，css，js的代码压缩","aria-hidden":"true"}},[t._v("#")]),t._v(" html，CSS，js的代码压缩")]),t._v(" "),s("p",[s("strong",[t._v("html压缩见html-webpack-plugin")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i optimize-css-assets-webpack-plugin -D\nnpm i uglifyjs-webpack-plugin -D\n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("let OptimizeCss = require('optimize-css-assets-webpack-plugin')\nlet UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nmodule.exports = {\n\toptimization:{//优化项\n\t\tminimizer:[\n\t\t\tnew UglifyJsPlugin({\n\t\t\t\tcache:true,\n\t\t\t\tparallel:true,\n\t\t\t\tsourceMap:true\n\t\t\t})//webpack4.0自动配置，不需要单独安装\n\t\t\tnew OptimizeCss({\n\t\t\t\tassetNameRegExp:/\\.css$/g,\n\t\t\t\tcssProcessor:require('cssnano') //cnpm i cssnano -D\n\t\t\t}) //用后js就压缩也许无效，必须配置uglify.js\n\t\t]\n\t}\n}\n")])])]),s("h2",{attrs:{id:"文件指纹的生成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件指纹的生成","aria-hidden":"true"}},[t._v("#")]),t._v(" 文件指纹的生成")]),t._v(" "),s("p",[t._v("Hash:和整个项目的构建相关，只要项目文件有修改，整个项目构建的hash值就会更改")]),t._v(" "),s("p",[t._v("Chunkhash:和webpack打包的chunk有关，不同的entry会生成不同的chunkhash值")]),t._v(" "),s("p",[t._v("Contenthash:根据文件内容来定义hash，文件内容不变，则contenthash不变")]),t._v(" "),s("h3",{attrs:{id:"js文件指纹的设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js文件指纹的设置","aria-hidden":"true"}},[t._v("#")]),t._v(" js文件指纹的设置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    // 多页面开发，怎么配置多页面\n    entry: {\n        index: './src/index.js',\n        login: './src/login.js'\n    },\n    // 出口文件  \n    output: {                       \n        filename: '[name][chunkhash:8].js',\n        path: __dirname+'/dist'\n    },\n}\n")])])]),s("h3",{attrs:{id:"css文件指纹的设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css文件指纹的设置","aria-hidden":"true"}},[t._v("#")]),t._v(" css文件指纹的设置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    // 多页面开发，怎么配置多页面\n    entry: {\n        index: './src/index.js',\n        login: './src/login.js'\n    },\n    // 出口文件  \n    output: {                       \n        filename: '[name][chunkhash:8].js',\n        path: __dirname+'/dist'\n    },\n    plugins: [\n        new MiniCssExtractPlugin({  \n            filename: '[name][contenthash:8].css',\n        })\n    ]\n}\n")])])]),s("h3",{attrs:{id:"图片的文件指纹设置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图片的文件指纹设置","aria-hidden":"true"}},[t._v("#")]),t._v(" 图片的文件指纹设置")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n    // 多页面开发，怎么配置多页面\n    entry: './src/index.js',\n    // 出口文件  \n    output: {                       \n        filename: 'bundle.js',\n        path: __dirname+'/dist'\n    },\n    module:{\n    \trules:[\n    \t\t{\n    \t\t\ttest:/\\.(png|svg|jpg|gif)$/,\n    \t\t\tuse:[{\n    \t\t\t\tloader:'file-loader',\n    \t\t\t\toptions:{\n    \t\t\t\t\tname:'img/[name][hash:8].[ext]'\n    \t\t\t\t}\n    \t\t\t}]\n    \t\t}\n    \t]\n    }\n}\n")])])])])},[],!1,null,null,null);e.default=n.exports}}]);